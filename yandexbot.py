import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

logging.basicConfig(level=logging.INFO)

TOKEN = "7662389849:AAFTkGq773-J5PfWP6AytlA4bzo8k9blmEo"

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode='HTML'))
dp = Dispatcher()

class UserState(StatesGroup):
    language = State()
    genre = State()

games_info = {
    "–≠–≤–æ–ª—é—Ü–∏—è —Å—Ç–∏—Ö–∏–π 2": {
        "description": "–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞, –≥–¥–µ –≤—ã —Ä–∞–∑–≤–∏–≤–∞–µ—Ç–µ —Å—Ç–∏—Ö–∏–∏ –æ—Ç –ø—Ä–æ—Å—Ç—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–æ —Å–ª–æ–∂–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π.",
        "genre": "–°—Ç—Ä–∞—Ç–µ–≥–∏—è",
        "url": "https://yandex.ru/games/app/406195",
        "en_name": "Element Evolution 2",
        "en_description": "A strategic game where you evolve elements from simple to complex combinations.",
        "image_url": "https://avatars.mds.yandex.net/get-games/3006389/2a00000195f6784827ab03fb5c7cad550be0/pjpg128x128"
    },
    "Immortal: Dark Slayer": {
        "description": "–≠–∫—à–µ–Ω-RPG —Å —Ç–µ–º–Ω—ã–º —Ñ—ç–Ω—Ç–µ–∑–∏, –≥–¥–µ –≤—ã —Å—Ä–∞–∂–∞–µ—Ç–µ—Å—å —Å –º–æ–Ω—Å—Ç—Ä–∞–º–∏ –∏ –ø—Ä–æ–∫–∞—á–∏–≤–∞–µ—Ç–µ –≥–µ—Ä–æ—è.",
        "genre": "RPG",
        "url": "https://yandex.ru/games/app/367650",
        "en_name": "Immortal: Dark Slayer",
        "en_description": "An action RPG with dark fantasy where you battle monsters and level up your hero.",
        "image_url": "https://avatars.mds.yandex.net/get-games/1881957/2a00000195f1cf0acd029771a6ac744d56c1/pjpg128x128"
    },
    "–¢–≤–æ–π –æ–±–±–∏": {
        "description": "–ì–æ–ª–æ–≤–æ–ª–æ–º–∫–∞ —Å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏, –≥–¥–µ –Ω—É–∂–Ω–æ –ø—Ä–µ–æ–¥–æ–ª–µ–≤–∞—Ç—å –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è.",
        "genre": "–ì–æ–ª–æ–≤–æ–ª–æ–º–∫–∞",
        "url": "https://yandex.ru/games/app/414319",
        "en_name": "Your Obby",
        "en_description": "A puzzle game with interesting levels where you need to overcome obstacles.",
        "image_url": "https://avatars.mds.yandex.net/get-games/12797757/2a000001952ed82409f705ff863d040af8a4/pjpg128x128"
    },
    "–ú–∞–¥–∂–æ–Ω–≥ –î–∑–µ–Ω —Å–∞–¥": {
        "description": "–†–∞—Å—Å–ª–∞–±–ª—è—é—â–∞—è –∏–≥—Ä–∞ –≤ –º–∞–¥–∂–æ–Ω–≥ —Å –∫—Ä–∞—Å–∏–≤–æ–π –≥—Ä–∞—Ñ–∏–∫–æ–π.",
        "genre": "–ì–æ–ª–æ–≤–æ–ª–æ–º–∫–∞",
        "url": "https://yandex.ru/games/app/302697",
        "en_name": "Mahjong Zen Garden",
        "en_description": "A relaxing mahjong game with beautiful graphics.",
        "image_url": "https://avatars.mds.yandex.net/get-games/1881371/2a000001900797c3f490899faa6a9d797f17/pjpg128x128"
    },
    "–î–æ–º–∏–Ω–æ –¥—É—ç–ª—å": {
        "description": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç–æ–ª—å–Ω–∞—è –∏–≥—Ä–∞ –≤ –¥–æ–º–∏–Ω–æ —Å —Ä–µ–∂–∏–º–æ–º –¥—É—ç–ª–∏.",
        "genre": "–ù–∞—Å—Ç–æ–ª—å–Ω–∞—è –∏–≥—Ä–∞",
        "url": "https://yandex.ru/games/app/199930",
        "en_name": "Domino Duel",
        "en_description": "A classic domino board game with a duel mode.",
        "image_url": "https://avatars.mds.yandex.net/get-games/6238841/2a0000018ea92483ba8d24adb8b1f9cfbc49/pjpg128x128"
    },
    "Live or die Survival": {
        "description": "–í—ã–∂–∏–≤–∞–Ω–∏–µ –≤ –ø–æ—Å—Ç–∞–ø–æ–∫–∞–ª–∏–ø—Ç–∏—á–µ—Å–∫–æ–º –º–∏—Ä–µ, –≥–¥–µ –≤–∞–∂–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è.",
        "genre": "–í—ã–∂–∏–≤–∞–Ω–∏–µ",
        "url": "https://yandex.ru/games/app/257333",
        "en_name": "Live or Die Survival",
        "en_description": "Survival in a post-apocalyptic world where making the right decisions is crucial.",
        "image_url": "https://avatars.mds.yandex.net/get-games/11374519/2a0000018c91ddc9e5f9a1bb30429942b5a7/pjpg128x128"
    },
    "–í—Å—Ç–∞–Ω—å –Ω–∞ –Ω—É–∂–Ω—ã–π —Ü–≤–µ—Ç, –†–æ–±–±–∏!": {
        "description": "–ê—Ä–∫–∞–¥–Ω–∞—è –∏–≥—Ä–∞ —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏: –≤—Å—Ç–∞–Ω—å—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π —Ü–≤–µ—Ç, —á—Ç–æ–±—ã –ø–æ–±–µ–¥–∏—Ç—å.",
        "genre": "–ê—Ä–∫–∞–¥–∞",
        "url": "https://yandex.ru/games/app/269613",
        "en_name": "Stand on the Right Color, Robby!",
        "en_description": "An arcade game with simple rules: stand on the right color to win.",
        "image_url": "https://avatars.mds.yandex.net/get-games/11374519/2a0000018bae4e1d9e7ca9ad39112c83640e/pjpg128x128"
    }
}

LANGUAGES = {
    "ru": "üá∑üá∫ –†—É—Å—Å–∫–∏–π",
    "en": "üá¨üáß English",
    "kk": "üá∞üáø “ö–∞–∑–∞“õ—à–∞"
}

GENRES_TRANSLATIONS = {
    "ru": ["–°—Ç—Ä–∞—Ç–µ–≥–∏—è", "RPG", "–ì–æ–ª–æ–≤–æ–ª–æ–º–∫–∞", "–ù–∞—Å—Ç–æ–ª—å–Ω–∞—è –∏–≥—Ä–∞", "–í—ã–∂–∏–≤–∞–Ω–∏–µ", "–ê—Ä–∫–∞–¥–∞"],
    "en": ["Strategy", "RPG", "Puzzle", "Board Game", "Survival", "Arcade"],
    "kk": ["–°—Ç—Ä–∞—Ç–µ–≥–∏—è", "RPG", "–ì–æ–ª–æ–≤–æ–ª–æ–º–∫–∞", "“Æ—Å—Ç–µ–ª –æ–π—ã–Ω—ã", "–¢—ñ—Ä—à—ñ–ª—ñ–∫", "–ê—Ä–∫–∞–¥–∞"]
}

TRANSLATIONS = {
    "ru": {
        "choose_genre": "–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:",
        "no_games": "–ò–≥—Ä—ã –¥–∞–Ω–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    },
    "en": {
        "choose_genre": "Choose genre:",
        "no_games": "No games found in this genre."
    },
    "kk": {
        "choose_genre": "–ñ–∞–Ω—Ä–¥—ã —Ç–∞“£–¥–∞“£—ã–∑:",
        "no_games": "–ë“±–ª –∂–∞–Ω—Ä–¥–∞ –æ–π—ã–Ω–¥–∞—Ä –∂–æ“õ."
    }
}

language_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text=LANGUAGES[code])] for code in LANGUAGES],
    resize_keyboard=True
)

def create_genre_keyboard(lang):
    genres = GENRES_TRANSLATIONS.get(lang, GENRES_TRANSLATIONS["ru"])
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=genre)] for genre in genres],
        resize_keyboard=True
    )

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=language_keyboard)
    await state.set_state(UserState.language)

@dp.message(F.text.in_(LANGUAGES.values()), UserState.language)
async def set_language(message: types.Message, state: FSMContext):
    lang_code = next(code for code, name in LANGUAGES.items() if name == message.text)
    await state.update_data(language=lang_code)
    await message.answer(
        TRANSLATIONS[lang_code]["choose_genre"],
        reply_markup=create_genre_keyboard(lang_code)
    )
    await state.set_state(UserState.genre)

@dp.message(UserState.genre)
async def set_genre(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    lang = user_data.get("language", "ru")
    
    genre_map = {translated: original for original, translated in zip(GENRES_TRANSLATIONS["ru"], GENRES_TRANSLATIONS[lang])}
    selected_genre = genre_map.get(message.text)
    
    if not selected_genre:
        await message.answer(TRANSLATIONS[lang]["no_games"])
        return
    
    filtered_games = {name: info for name, info in games_info.items() if info["genre"] == selected_genre}
    
    if not filtered_games:
        await message.answer(TRANSLATIONS[lang]["no_games"])
        return
    
    buttons = [
        [InlineKeyboardButton(text=info["en_name"] if lang == "en" else name, callback_data=name)]
        for name, info in filtered_games.items()
    ]
    await message.answer(
        TRANSLATIONS[lang]["choose_genre"],
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )

@dp.callback_query()
async def show_game_info(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    lang = user_data.get("language", "ru")
    game = games_info.get(callback.data)
    
    if not game:
        await callback.answer(TRANSLATIONS[lang]["no_games"])
        return
    
    genre_map = {original: translated for original, translated in zip(GENRES_TRANSLATIONS["ru"], GENRES_TRANSLATIONS[lang])}
    translated_genre = genre_map.get(game["genre"], game["genre"])
    
    text = (
        f"<b>{game['en_name'] if lang == 'en' else callback.data}</b>\n"
        f"–ñ–∞–Ω—Ä: {translated_genre}\n\n"
        f"{game['en_description'] if lang == 'en' else game['description']}\n\n"
        f"–°—Å—ã–ª–∫–∞: {game['url']}"
    )
    
    await callback.message.answer_photo(photo=game["image_url"], caption=text)
    await callback.answer()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())